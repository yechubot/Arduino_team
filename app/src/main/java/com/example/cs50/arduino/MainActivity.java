package com.example.cs50.arduino;import android.annotation.SuppressLint;import android.app.Notification;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.NotificationCompat;import androidx.core.app.NotificationManagerCompat;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.Volley;import com.bumptech.glide.Glide;import com.pedro.library.AutoPermissions;import com.pedro.library.AutoPermissionsListener;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.text.SimpleDateFormat;import java.util.Calendar;public class MainActivity extends AppCompatActivity implements AutoPermissionsListener {    private static final String TAG = "main";    //ui    LinearLayout weather, stroll, window;    String date_time;    TextView today_date_time;    TextView loc, des;    ImageView weather_icon;    //location    LocationManager locManager;    boolean isGPSEnabled = false;    boolean isNetworkEnabled = false;    boolean isGetLoc = false;    Location location;    double lat;    double lon;    //최소 gps 정보 업뎃 거리 1000 미터    private static final long MIN_DISTANCE_TO_UPDATE = 1000;    //최소 업뎃 시간 1분    private static final long MIN_TIME_TO_UPDATE = 1000 * 60 * 1;    //화재감지 전화테스트    TextView fire_status;    //화재감지 notification    ImageView iv_fire;    NotificationManagerCompat notificationManager;    // Uri alarmSound = Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE + "://" + BuildConfig.APPLICATION_ID + "/" + R.raw.siren);    final long[] VIBRATE_PATTERN = {500, 1000, 300, 1000, 500, 1000, 300, 1000};    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        AutoPermissions.Companion.loadAllPermissions(this, 101); //모든 퍼미션 다 체크해줌.        Calendar calendar = Calendar.getInstance();        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy년 MM월 dd일");        date_time = simpleDateFormat.format(calendar.getTime());        //원 3개        weather = findViewById(R.id.weather);        stroll = findViewById(R.id.stroll);        window = findViewById(R.id.window);        //위치 가져오기        get_Location();        //날씨 원 text        today_date_time = findViewById(R.id.today_date_time);        loc = findViewById(R.id.loc);        weather_icon = findViewById(R.id.weather_icon);        des = findViewById(R.id.des);        //현재 날짜        today_date_time.setText(date_time);        weather.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getApplicationContext(), WeatherActivity.class);                startActivity(intent);            }        });        stroll.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getApplicationContext(), StrollActivity.class);                startActivity(intent);            }        });        window.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(getApplicationContext(), WindowActivity.class);                startActivity(intent);            }        });/*        //화재감지전화테스트        fire_status = (TextView) findViewById(R.id.fire_status);        // 오류나서 주석처리해놓음        fire_status.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent intent=new Intent(getApplicationContext(),FireNotification.class);                startActivity(intent);            }        });        //화재감지notification        iv_fire = (ImageView) findViewById(R.id.iv_fire);        notificationManager = NotificationManagerCompat.from(this);        iv_fire.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                sendOnChannel1(v);            }        });*/    }    @SuppressLint("MissingPermission")    public Location get_Location() {        locManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);        try {             isGPSEnabled = locManager.isProviderEnabled(LocationManager.GPS_PROVIDER);             isNetworkEnabled = locManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);        } catch (Exception e) {            e.getMessage();        }        if (!isGPSEnabled && !isNetworkEnabled) {            showToast("GSP 또는 네트워크가 연결되지 않음");        } else {            this.isGetLoc = true;            //여기부터 그냥 통과됨            if (isNetworkEnabled) {                Log.d(TAG, "network enabled ");            } else {                showToast("네트워크 위치에 접근할 수 없습니다"); // 와이파이만 사용하는 경우 접근할 수 없다.            }            locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME_TO_UPDATE, MIN_DISTANCE_TO_UPDATE, locationListener);            if (locManager != null) {                location = locManager.getLastKnownLocation(locManager.NETWORK_PROVIDER);                Log.d(TAG, "network location manager not null");                if (location != null) {                    lat = location.getLatitude();                    lon = location.getLongitude();                    Log.d(TAG, "network location not null");                }            }        }        if (isGPSEnabled) {            Log.d(TAG, "gps enabled ");            location = locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);            if (location == null) {                locManager.requestLocationUpdates(locManager.GPS_PROVIDER, MIN_TIME_TO_UPDATE, MIN_DISTANCE_TO_UPDATE, locationListener);                if (locManager != null) {                    location = locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);                    Log.d(TAG, "gps location manger not null");                    if (location != null) {                        lat = location.getLatitude();                        lon = location.getLongitude();                        Log.d(TAG, "gps location not null ");                    }                }            }        }        return location;    }    private LocationListener locationListener = new LocationListener() {        @Override        public void onLocationChanged(@NonNull Location location) {            //날씨 호출 메소드            get_weather(location.getLatitude(), location.getLongitude());            Log.d(TAG, "onLocationChanged:location:  "+location);        }        @Override        public void onProviderEnabled(@NonNull String provider) {        }        @Override        public void onProviderDisabled(@NonNull String provider) {        }    };    public void get_weather(double lat, double lon) {        //open weather API id -> description        final int weather_id[] = {201, 200, 202, 210, 211, 212, 221, 230, 231, 232,                300, 301, 302, 310, 311, 312, 313, 314, 321, 500,                501, 502, 503, 504, 511, 520, 521, 522, 531, 600,                601, 602, 611, 612, 615, 616, 620, 621, 622, 701,                711, 721, 731, 741, 751, 761, 762, 771, 781, 800,                801, 802, 803, 804, 900, 901, 902, 903, 904, 905,                906, 951, 952, 953, 954, 955, 956, 957, 958, 959,                960, 961, 962};        final String weather_des[] = {"가벼운 비 동 천둥구름", "비 동반 천둥구름", "폭우 동반 천둥구름", "약한 천둥구름",                "천둥구름", "강한 천둥구름", "불규칙적 천둥구름", "약한 연무를 동반한 천둥구름", "연무를 동반한 천둥구름",                "강한 안개비 동반 천둥구름", "가벼운 안개비", "안개비", "강한 안개비", "가벼운 적은비", "적은비",                "강한 적은비", "소나기와 안개비", "강한 소나기와 안개비", "소나기", "악한 비", "중간 비", "강한 비",                "매우 강한 비", "극심한 비", "우박", "약한 소나기 비", "소나기 비", "강한 소나기 비", "불규칙적 소나기 비",                "가벼운 눈", "눈", "강한 눈", "진눈깨비", "소나기 진눈깨비", "약한 비와 눈", "비와 눈", "약한 소나기 눈",                "소나기 눈", "강한 소나기 눈", "박무", "연기", "연무", "모래 먼지", "안개", "모래", "먼지", "화산재", "돌풍",                "토네이도", "구름 한 점 없는 맑은 하늘", "약간의 구름이 낀 하늘", "드문드문 구름이 낀 하늘", "구름이 거의 없는 하늘",                "구름으로 뒤덮인 흐린 하늘", "토네이도", "태풍", "허리케인", "한랭", "고온", "바람부는", "우박", "바람이 거의 없음",                "약한 바람", "부드러운 바람", "중간 세기 바람", "신선한 바람", "센 바람", "돌풍에 가까운 센 바람", "돌풍",                "심각한 돌풍", "폭풍", "강한 폭풍", "허리케인"};        //  Log.d(TAG, "get_weather: 메소드 실행");        //잘 들어옴        String url = "http://api.openweathermap.org/data/2.5/weather?lat=" + lat + "&lon=" + lon + "&units=metric&appid=b422bc7295c0ae11f8756e015fe316f9";        JsonObjectRequest jor = new JsonObjectRequest(Request.Method.GET, url, null, new Response.Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                try {                    JSONObject main_object = response.getJSONObject("main");                    Log.d(TAG, "main_object : " + main_object);                    //"weather"부분 가져옴                    JSONArray array = response.getJSONArray("weather");                    JSONObject object = array.getJSONObject(0);                    //city name                    String city = response.getString("name");                    //온도 부분 - 일단 안씀                    //String main = String.valueOf(main_object.getDouble("temp"));                    //id를 가져옴                    String id = object.getString("id");                    //Log.d(TAG, "id: "+id);                    String id_description = null;                    for (int i = 0; i < weather_des.length; i++) {                        if (Integer.parseInt(id) == weather_id[i]) {                            int index = i;                            id_description = weather_des[index];                        }                    }                    //icon                    String icon = object.getString("icon");                    String iconUrl = "http://openweathermap.org/img/w/" + icon + ".png";                    Glide.with(getApplicationContext()).load(iconUrl).into(weather_icon);                    loc.setText(city);                    des.setText(id_description);                } catch (JSONException e) {                    e.printStackTrace();                    Log.d(TAG, "err : " + e.getMessage());                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {            }        });        RequestQueue queue = Volley.newRequestQueue(this);        queue.add(jor);    }    public void sendOnChannel1(View v) {        Notification notification = new NotificationCompat.Builder(this, NotiChannel.CHANNEL_1_ID)                .setSmallIcon(R.drawable.ic_fire)                .setTicker("화재감지경보")                .setContentTitle("화재감지경보")                .setContentText("화재가 감지되어 자동으로 창문열기 실행됨")                .setPriority(NotificationCompat.PRIORITY_HIGH)                .setColor(Color.RED)                .setSound(Uri.parse("android.resource://"                        + getApplicationContext().getPackageName() + "/"                        + R.raw.siren))                .setVibrate(VIBRATE_PATTERN)                .setAutoCancel(true)                .build();        notificationManager.notify(1, notification);    }    public void sendOnChannel2(View v) {    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        AutoPermissions.Companion.parsePermissions(this, requestCode, permissions, this);    }    @Override    public void onDenied(int i, String[] strings) {    }    @Override    public void onGranted(int i, String[] strings) {    }    public void showToast(String msg) {        Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT).show();    }}